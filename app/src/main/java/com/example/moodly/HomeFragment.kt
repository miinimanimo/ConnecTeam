package com.example.moodly

import android.app.AlertDialog
import android.content.Context
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.PopupMenu
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.NavOptions
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.moodly.databinding.FragmentHomeBinding
import com.prolificinteractive.materialcalendarview.MaterialCalendarView
import com.prolificinteractive.materialcalendarview.CalendarDay
import com.prolificinteractive.materialcalendarview.DayViewDecorator
import com.prolificinteractive.materialcalendarview.DayViewFacade
import com.prolificinteractive.materialcalendarview.spans.DotSpan
import com.prolificinteractive.materialcalendarview.OnDateSelectedListener
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.SimpleDateFormat
import java.util.*

class HomeFragment : Fragment() {

    private var _binding: FragmentHomeBinding? = null
    private val binding get() = _binding!!
    private val diaryAdapter = DiaryAdapter()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentHomeBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // Title image ÏÑ§Ï†ï
        binding.titleImage.setImageResource(R.drawable.title)

        // ÌòÑÏû¨ ÎÇ†ÏßúÎ•º ÏÑ§Ï†ï
        setCalendarHeader()

        // Express Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ïù¥Îèô
        binding.expressButton.setOnClickListener {
            findNavController().navigate(R.id.action_homeFragment_to_expressFragment)
        }

        // Îã¨Î†• Ï¥àÍ∏∞Ìôî
        setupCalendar()

        // Î©îÎâ¥ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
        binding.menuButton.setOnClickListener {
            showPopupMenu(it)
        }

        // RecyclerView ÏÑ§Ï†ï
        setupRecyclerView()
    }

    private fun setupRecyclerView() {
        binding.diaryRecyclerView.apply {
            layoutManager = LinearLayoutManager(requireContext())
            adapter = diaryAdapter
        }
    }

    private fun setCalendarHeader() {
        val currentDate = SimpleDateFormat("EEEE, d MMMM yyyy", Locale.getDefault()).format(Date())
        binding.calendarHeader.text = currentDate
    }

    private fun setupCalendar() {
        // ÌòÑÏû¨ ÎÇ†ÏßúÎ°ú Ï¥àÍ∏∞ÌôîÌï† ÎïåÎäî CalendarÍ∞Ä 0-basedÏù¥ÎØÄÎ°ú +1 ÌïÑÏöî
        val currentDate = Calendar.getInstance()
        fetchDiariesForMonth(
            currentDate.get(Calendar.YEAR),
            currentDate.get(Calendar.MONTH) + 1
        )

        // MaterialCalendarViewÏóêÏÑú Î∞õÏùÄ monthÏóêÎäî +1Ìï† ÌïÑÏöî ÏóÜÏùå (Ïù¥ÎØ∏ Î≥¥Ï†ïÎêòÏñ¥ ÏûàÏùå)
        binding.calendarView.setOnMonthChangedListener { widget, date ->
            fetchDiariesForMonth(date.year, date.month)
        }

        binding.calendarView.setOnDateChangedListener { widget, date, selected ->
            if (selected) {
                fetchDiariesForDay(date.year, date.month, date.day)
            }
        }
    }

    private fun fetchDiariesForMonth(year: Int, month: Int) {
        val token = requireContext().getSharedPreferences("MyAppPrefs", Context.MODE_PRIVATE)
            .getString("jwt_token", null)

        if (token != null) {
            val authToken = "Bearer $token"
            RetrofitClient.instance.getDiariesForMonth(authToken, year, month)
                .enqueue(object : Callback<DaysResponse> {
                    override fun onResponse(
                        call: Call<DaysResponse>,
                        response: Response<DaysResponse>
                    ) {
                        if (response.isSuccessful) {
                            response.body()?.let { daysResponse ->
                                highlightDiaryDates(year, month, daysResponse.days)
                            }
                        }
                    }

                    override fun onFailure(call: Call<DaysResponse>, t: Throwable) {
                        Log.e("Calendar", "Failed to fetch diary dates", t)
                    }
                })
        }
    }

    private fun fetchDiariesForDay(year: Int, month: Int, day: Int) {
        val token = requireContext().getSharedPreferences("MyAppPrefs", Context.MODE_PRIVATE)
            .getString("jwt_token", null)

        if (token != null) {
            val authToken = "Bearer $token"
            RetrofitClient.instance.getDiariesForDay(authToken, year, month, day)
                .enqueue(object : Callback<List<DayDiary>> {
                    override fun onResponse(
                        call: Call<List<DayDiary>>,
                        response: Response<List<DayDiary>>
                    ) {
                        if (response.isSuccessful) {
                            response.body()?.let { diaries ->
                                if (diaries.isEmpty()) {
                                    // ÏùºÍ∏∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞
                                    binding.emptyMessageCard.visibility = View.VISIBLE
                                    binding.diaryRecyclerView.visibility = View.GONE
                                } else {
                                    // ÏùºÍ∏∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞
                                    binding.emptyMessageCard.visibility = View.GONE
                                    binding.diaryRecyclerView.visibility = View.VISIBLE
                                    diaryAdapter.updateDiaries(diaries)
                                }
                            }
                        }
                    }

                    override fun onFailure(call: Call<List<DayDiary>>, t: Throwable) {
                        Log.e("Diary", "Failed to fetch diaries", t)
                        // ÏóêÎü¨ Î∞úÏÉù ÏãúÏóêÎèÑ Î©îÏãúÏßÄ ÌëúÏãú
                        binding.emptyDiaryText.text = "Failed to load diaries"
                        binding.emptyMessageCard.visibility = View.VISIBLE
                        binding.diaryRecyclerView.visibility = View.GONE
                    }
                })
        }
    }

    private fun highlightDiaryDates(year: Int, month: Int, days: List<Int>) {
        binding.calendarView.removeDecorators()

        val decorator = object : DayViewDecorator {
            override fun shouldDecorate(day: CalendarDay): Boolean {
                return day.year == year &&
                        day.month == month - 1 && // MaterialCalendarViewÎäî 0-based monthÎ•º ÏÇ¨Ïö©
                        days.contains(day.day)
            }

            override fun decorate(view: DayViewFacade) {
                view.addSpan(DotSpan(5f, resources.getColor(R.color.purple_500)))
            }
        }

        binding.calendarView.addDecorator(decorator)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    private fun showPopupMenu(anchor: View) {
        val popupMenu = PopupMenu(requireContext(), anchor)
        popupMenu.menuInflater.inflate(R.menu.popup_menu, popupMenu.menu)

        popupMenu.setOnMenuItemClickListener { menuItem ->
            when (menuItem.itemId) {
                R.id.menu_profile -> {
                    val navController = findNavController()
                    val navOptions = NavOptions.Builder()
                        .setPopUpTo(R.id.homeFragment, true)
                        .setLaunchSingleTop(true)
                        .build()
                    navController.navigate(R.id.action_homeFragment_to_profileFragment, null, navOptions)
                    true
                }
                R.id.menu_logout -> {
                    findNavController().navigate(R.id.action_homeFragment_to_loginActivity)
                    Toast.makeText(requireContext(), "Logged out.", Toast.LENGTH_SHORT).show()
                    true
                }
                R.id.menu_contact -> {
                    AlertDialog.Builder(requireContext())
                        .setTitle("ÌöåÏÇ¨ Contact")
                        .setMessage("contact@company.com")
                        .setPositiveButton("ÌôïÏù∏", null)
                        .show()
                    true
                }
                else -> false
            }
        }
        popupMenu.show()
    }

    inner class DiaryAdapter : RecyclerView.Adapter<DiaryAdapter.DiaryViewHolder>() {
        private var diaries: List<DayDiary> = listOf()

        inner class DiaryViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
            val titleText: TextView = itemView.findViewById(R.id.titleText)
            val emotionText: TextView = itemView.findViewById(R.id.emotionText)
        }

        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DiaryViewHolder {
            val view = LayoutInflater.from(parent.context)
                .inflate(R.layout.item_diary, parent, false)
            return DiaryViewHolder(view)
        }

        override fun onBindViewHolder(holder: DiaryViewHolder, position: Int) {
            val diary = diaries[position]
            holder.titleText.text = diary.title
            val emoticons = diary.emotion_categories.map { emotion ->
                when (emotion.name) {
                    "Happy" -> "üòä"
                    "Excited" -> "üòé"
                    "Soso" -> "üòê"
                    "Sad" -> "üòï"
                    "Angry" -> "üò†"
                    "Tired" -> "üò™"
                    else -> ""
                }
            }
            holder.emotionText.text = emoticons.joinToString(" ")
        }

        override fun getItemCount() = diaries.size

        fun updateDiaries(newDiaries: List<DayDiary>) {
            diaries = newDiaries
            notifyDataSetChanged()
        }
    }
}